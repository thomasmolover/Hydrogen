plugins {
    id 'com.android.application'
}

android {
    namespace 'com.zhihu.hydrogen.x'
    compileSdk 35

    defaultConfig {
        applicationId "com.zhihu.hydrogen.x"
        minSdk 21
        targetSdk 33
        versionCode 1
        versionName "new"
    }

    signingConfigs {
        release {
            storeFile file("${project.rootDir}${File.separator}hydrogen.jks")
            storePassword "zhihu"
            keyAlias "hydrogen"
            keyPassword "android"
            enableV1Signing true
            enableV2Signing true
            enableV3Signing true
            enableV4Signing true
        }
        debug {
            storeFile file("${project.rootDir}${File.separator}hydrogen.jks")
            storePassword "zhihu"
            keyAlias "hydrogen"
            keyPassword "android"
            enableV1Signing true
            enableV2Signing true
            enableV3Signing true
            enableV4Signing true
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
            minifyEnabled false
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            ndk.abiFilters 'armeabi-v7a', 'x86', 'arm64-v8a'
        }
        debug {
            signingConfig signingConfigs.debug
            minifyEnabled false
            shrinkResources false
            ndk.abiFilters 'armeabi-v7a', 'x86', 'arm64-v8a'
        }
    }



    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    lint {
        abortOnError false
        checkReleaseBuilds false
    }

    buildFeatures {
        buildConfig true
    }
}

dependencies {
    implementation libs.androidx.appcompat
    implementation libs.androidx.appcompat.resources
    implementation libs.androidx.core
    implementation libs.androidx.transition
    implementation libs.androidx.fragment
    implementation libs.androidx.viewpager2
    implementation libs.androidx.swiperefresh
    implementation libs.flexbox
    implementation libs.glide
    annotationProcessor libs.glide.compiler
    implementation libs.webviewup.core
    implementation libs.androidx.activity
    implementation libs.androidx.splashscreen
    //implementation 'com.github.ZL114514:material-components-android:hydrogen-SNAPSHOT'
    

    implementation fileTree("libs")
    implementation project(':androlua')
    implementation project(':Jesse205Library')
    implementation libs.material
}

// 保存原始的 assets 和 resources 目录路径
def originalAssetsDirs = null
def originalResourcesDirs = null

// 定义临时合并目录
def mergedAssetsDir = file("${buildDir}${File.separator}temp-assets")
def mergedLuaDir = file("${buildDir}${File.separator}temp-luaresources")

project.afterEvaluate { project ->


    // 判断当前是否是带Lua的构建
    def isLuaBuild = gradle.startParameter.taskNames.any { it.contains('assembleRelease') && !it.contains('unlua') }

    // 任务1: 合并所有子模块的 assets_bin 到临时目录
    tasks.register("mergeAssetsBin", Copy) {
        group = "自定义构建"
        description = "合并所有模块的 assets_bin 到临时目录"

        doFirst {
            logger.lifecycle("Preparing to merge assets...")
            if (mergedAssetsDir.exists()) {
                logger.lifecycle("Cleaning existing temp dir: ${mergedAssetsDir}")
                mergedAssetsDir.deleteDir()
            }
            mergedAssetsDir.mkdirs()
        }

        rootProject.subprojects.each { sub ->
            def assetsBin = sub.file("src${File.separator}main${File.separator}assets_bin")
            if (assetsBin.exists()) {
                from(assetsBin)
                logger.lifecycle("Adding assets from: ${sub.name}")
            }
        }

        into mergedAssetsDir
        includeEmptyDirs = false
        duplicatesStrategy = DuplicatesStrategy.WARN

        enabled = isLuaBuild  // 只有Lua构建才启用
    }

    // 任务2: 合并所有子模块的 luaLibs 到临时目录
    tasks.register("mergeLuaLibs", Copy) {
        group = "自定义构建"
        description = "合并所有模块的 luaLibs 到临时目录"

        doFirst {
            logger.lifecycle("Preparing to merge Lua resources...")
            if (mergedLuaDir.exists()) {
                logger.lifecycle("Cleaning existing temp dir: ${mergedLuaDir}")
                mergedLuaDir.deleteDir()
            }
            mergedLuaDir.mkdirs()
        }

        rootProject.subprojects.each { sub ->
            def luaLibs = sub.file("src${File.separator}main${File.separator}luaLibs")
            if (luaLibs.exists()) {
                from(luaLibs)
                logger.lifecycle("Adding Lua from: ${sub.name}")
            }
        }

        into file("${mergedLuaDir}${File.separator}lua")
        includeEmptyDirs = false
        duplicatesStrategy = DuplicatesStrategy.WARN

        enabled = isLuaBuild  // 只有Lua构建才启用
    }

    // 任务3: 修改源集目录配置
    tasks.register("modifyAssetsAndResources") {
        group = "自定义构建"
        description = "修改源集目录配置"

        dependsOn mergeAssetsBin
        dependsOn mergeLuaLibs

        doFirst {
            if (isLuaBuild) {
                // 保存原始目录配置
                if (originalAssetsDirs == null) {
                    originalAssetsDirs = android.sourceSets.main.assets.srcDirs.collect()
                    originalResourcesDirs = android.sourceSets.main.resources.srcDirs.collect()
                    logger.lifecycle("Original assets dirs saved")
                }

                // 添加临时目录到源集
                android.sourceSets.main.assets.srcDirs += mergedAssetsDir
                android.sourceSets.main.resources.srcDirs += mergedLuaDir

                logger.lifecycle("Modified source sets for Lua build")

                logger.lifecycle("Adding Lua from: ${android.sourceSets.main.resources.srcDirs}")
            } else {
                logger.lifecycle("Skipping source set modification for non-Lua build")
            }
        }
    }

    // 任务4: 恢复原始配置
    tasks.register("restoreAssetsAndResources") {
        group = "自定义构建"
        description = "恢复原始源集配置"


        doLast {
            if (isLuaBuild && originalAssetsDirs != null) {
                android.sourceSets.main.assets.setSrcDirs(originalAssetsDirs)
                android.sourceSets.main.resources.setSrcDirs(originalResourcesDirs)
                logger.lifecycle("Restored original source sets")

                // 清理临时目录
                mergedAssetsDir.deleteDir()
                mergedLuaDir.deleteDir()
                logger.lifecycle("Cleaned temp directories")
            }
        }
    }

    // 配置标准发布任务
    tasks.named('assembleRelease') {
        group = "自定义构建"
        description = "带Lua资源合并的发布构建"

        // 必须要清理 否则概率无法打包
        dependsOn cleanDynamicIntermediates
        dependsOn modifyAssetsAndResources
        finalizedBy restoreAssetsAndResources


        doLast {
            if (isLuaBuild) {
                renameApkWithMukVersion()
            }
        }
    }

    // 创建不带Lua的发布任务
    tasks.register("assembleRelease_unlua") {
        group = "自定义构建"
        description = "标准发布构建(不带Lua资源合并)"

        dependsOn 'assembleRelease'

    }

    // 配置任务依赖关系
    tasks.named('mergeReleaseAssets') {
        mustRunAfter 'mergeAssetsBin'
        dependsOn 'modifyAssetsAndResources'
    }

    tasks.named('processReleaseResources') {
        mustRunAfter 'modifyAssetsAndResources'
    }


    tasks.register('cleanDynamicIntermediates', Delete) {
        group = "构建"
        description = "彻底删除指定的intermediates目录"

        doFirst {
            // 直接删除整个文件夹（如果存在）
            def dirsToDelete = [
                    "${buildDir}${File.separator}intermediates${File.separator}java_res${File.separator}release${File.separator}out${File.separator}lua",
                    "${buildDir}${File.separator}intermediates${File.separator}assets${File.separator}release",
                    "${buildDir}${File.separator}intermediates${File.separator}merged_java_res",
                    "${buildDir}${File.separator}temp-assets",
                    "${buildDir}${File.separator}temp-luaresources"
            ]

            dirsToDelete.each { dirPath ->
                def dir = file(dirPath)
                if (dir.exists()) {
                    if (dir.deleteDir()) {
                        logger.lifecycle("Deleted directory: ${dirPath}")
                    } else {
                        logger.error("Failed to delete: ${dirPath}")
                    }
                } else {
                    logger.lifecycle("Directory not found (skipped): ${dirPath}")
                }
            }
        }

        enabled = isLuaBuild  // 只有Lua构建才启用
    }

}


// APK重命名方法
def renameApkWithMukVersion() {
    def releaseVariant = android.applicationVariants.find { it.name == 'release' }
    if (!releaseVariant) {
        throw new GradleException("Release variant not found")
    }

    def appName = "Hydrogen"
    def appVersionName = releaseVariant.versionName
    def isSigned = releaseVariant.buildType.signingConfig != null
    def suffix = isSigned ? "" : "_unsigned"

    // 查找muk.lua版本
    def assetsDir = android.sourceSets.main.assets.srcDirs.find { it.path.contains("assets") }.parentFile
    def mukFile = new File(assetsDir, "assets_bin${File.separator}mods${File.separator}muk.lua")
    if (!mukFile.exists()) {
        throw new GradleException("muk.lua not found at: ${mukFile.absolutePath}")
    }

    def text = mukFile.getText('UTF-8')
    def versionMatcher = text =~ /versionCode\s*=\s*([\d.]+)/
    if (!versionMatcher.find()) {
        throw new GradleException("Invalid versionCode format in muk.lua")
    }
    def mukVersion = versionMatcher.group(1)

    // 重命名APK
    def apkDir = new File(project.buildDir, "outputs${File.separator}apk${File.separator}release")
    def latestApk = apkDir.listFiles()?.findAll { it.name.endsWith('.apk') }?.sort { -it.lastModified() }?.first()

    if (latestApk) {
        def newName = "${appName}_${appVersionName}_${mukVersion}${suffix}.apk"
        def newApkPath = new File(apkDir, newName)

        if (latestApk.renameTo(newApkPath)) {
            logger.lifecycle("APK renamed to: ${newName}")
        } else {
            throw new GradleException("Failed to rename APK")
        }
    } else {
        throw new GradleException("No APK file found")
    }
}