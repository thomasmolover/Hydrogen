name: Android Build Workflow

on:
  workflow_dispatch:
  schedule:
    - cron: '0 9 * * *'  # 每天 UTC +8 时间凌晨 1 点运行

  jobs:
    check-commits:  # 第一个 job：检查最近 24 小时是否有新提交
      runs-on: ubuntu-latest
      outputs:
        has_new_commits: ${{ steps.check.outputs.has_new }}  # 输出变量，用于后续 job 判断
      steps:
        - name: Checkout code
          uses: actions/checkout@v4
            
        - name: Check for new commits in last 24 hours
          id: check  # 设置 ID 以输出变量
          run: |
            # 查询最近 24 小时的提交（--oneline 简化输出）
            commits=$(git log --since="24 hours ago" --oneline)
            
            if [ -n "$commits" ]; then
              echo "最近 24 小时有新提交："
              echo "$commits"
              echo "has_new=true" >> $GITHUB_OUTPUT  # 有新提交，设置 true
            else
              echo "最近 24 小时无新提交。"
              echo "has_new=false" >> $GITHUB_OUTPUT  # 无新提交，设置 false
            fi
  
    build:
      runs-on: ubuntu-latest
      needs: check-commits  # 依赖于检查 job
      if: ${{ needs.check-commits.outputs.has_new_commits == 'true' }}  # 只有有新提交时执行
      permissions:
        contents: write
        packages: write
  
      steps:
        - name: Checkout Code
          uses: actions/checkout@v4
  
        - name: Set up JDK
          uses: actions/setup-java@v4
          with:
            java-version: '17'
            distribution: 'temurin'
  
        - name: Grant execute permission for gradlew
          run: (cd Hydrogen && chmod +x gradlew)
  
        - name: Execute Gradle Command in Hydrogen Directory
          run: |
            (cd Hydrogen && ./gradlew app:assembleRelease)
  
        # 提取版本号
        - name: Extract version from APK filename
          if: github.event.inputs.build_type == 'build_and_publish' || github.event.inputs.build_type == 'build_and_nightly_publish'
          id: extract_version
          run: |
            # 查找 APK 文件
            APK_FILE=$(find Hydrogen/app/build/outputs/apk/release/ -name "Hydrogen_new_*.apk" | head -1)
            if [ -n "$APK_FILE" ]; then
              # 获取 APK 文件的创建时间
              BUILD_TIME=$(stat -c '%y' "$APK_FILE" | cut -d'.' -f1)
              echo "build_time=$BUILD_TIME" >> $GITHUB_OUTPUT
              echo "APK 文件创建时间: $BUILD_TIME"
  
              # 提取版本号
              VERSION=$(basename "$APK_FILE" | grep -o 'Hydrogen_new_0\.\([0-9]\{3\}\)\.apk' | sed 's/Hydrogen_new_0\.\([0-9]\{3\}\)\.apk/\1/')
              if [ -n "$VERSION" ]; then
                echo "提取到版本号: $VERSION"
  
                # 设置输出变量
                echo "version=$VERSION" >> $GITHUB_OUTPUT
                echo "build_time=$BUILD_TIME" >> $GITHUB_OUTPUT
                echo "apk_file=$APK_FILE" >> $GITHUB_OUTPUT
              else
                echo "无法从文件名提取版本号"
                echo "APK 文件: $APK_FILE"
                exit 1
              fi
            else
              echo "未找到匹配的 APK 文件"
              exit 1
            fi
  
        - name: Publish Release APK to GitHub Releases
          if: github.event.inputs.build_type == 'build_and_publish'
          uses: softprops/action-gh-release@v2
          with:
            tag_name: v0.${{ steps.extract_version.outputs.version }}
            files: |
              ${{ steps.extract_version.outputs.apk_file }}
              
        - name: Publish Release APK to GitHub Nightly Releases
          if: github.event.inputs.build_type == 'build_and_nightly_publish'
          id: nightly_release
          uses: softprops/action-gh-release@v2
          with:
            tag_name: nightly v0.${{ steps.extract_version.outputs.version }}
            name: Nightly Build (${{ steps.extract_version.outputs.build_time }})
            files: |
              ${{ steps.extract_version.outputs.apk_file }}
            prerelease: true